name: Create Issues Over API Test

on: 
  workflow_dispatch:

permissions:
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run Docker
        run: docker compose up -d

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npm install @playwright/test && npx playwright install --with-deps

      # Run Playwright tests using 2 workers with config
      - name: Run Playwright tests
        id: playwright
        run: |
          npx playwright test tests/always-fail.test.js --workers=2 --reporter=json > playwright-report.json
        continue-on-error: true

      # Always list root directory to verify report file location
      # - name: List root directory contents
      #   if: always()  # Ensure it runs even if the test fails
      #   run: ls -R .

      # Debug: Output Playwright report content
      # - name: Debug Playwright Report
      #   if: always()  # Ensure it runs even if the test fails
      #   run: cat playwright-report.json

      # Upload Playwright Report, ensure it's always attempted
      - name: Upload Playwright Report
        if: always()  # Ensure it runs even if the test fails
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report.json  # Correct file path
          retention-days: 3

      - name: Debug jq output
        if: always()
        run: |
          TEST_NAMES=$(jq -r '.suites[]?.specs[]? | select(.tests[]?.results[-1].status == "failed") | .title' playwright-report.json)
          echo "Test names: $TEST_NAMES"

      # Search for existing issues for failed tests
      - name: Search for existing issues for failed tests
        if: always()  # Only execute if tests fail
        id: search_issue
        run: |
          TEST_NAMES=$(jq -r '.suites[]?.specs[]? | select(.tests[]?.results[-1].status == "failed") | .title' playwright-report.json)
          echo "Searching for issues related to failed test: $TEST_NAMES"
          
          if [ -z "$TEST_NAMES" ]; then
            echo "No failed tests found."
            exit 0  # No action required if no failed tests
          fi

          ENCODED_TEST_NAMES=$(echo "$TEST_NAMES" | sed 's/ /%20/g')
          echo "Encoded test names: $ENCODED_TEST_NAMES"

          SEARCH_URL="https://api.github.com/search/issues?q=repo:buerokratt/GH-API-Test-1+is:issue+is:open+in:title+$ENCODED_TEST_NAMES"
          echo "GitHub API search URL: $SEARCH_URL"
          
          existing_issues=$(curl -s \
            -H "Authorization: token ${{ secrets.BYK_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$SEARCH_URL")

          echo "API response: $existing_issues"

          issue_count=$(echo "$existing_issues" | jq '.total_count')

          if [ $? -ne 0 ]; then
            echo "Error parsing the API response with jq."
            exit 3
          fi
            
          echo "Found issues count: $issue_count"
          echo "::set-output name=issue_found::$issue_count"
          
      - name: Debug search_issue output
        if: always()
        run: |
          echo "Issue found count: ${{ steps.search_issue.outputs.issue_found }}"

      # Create new issue for failed test
      - name: Create new issue for failed test
        if: steps.search_issue.outputs.issue_found == '0'
        run: |
          TEST_NAMES=$(jq -r '.suites[]?.specs[]? | select(.tests[]?.results[-1].status == "failed") | .title' playwright-report.json)
          ERROR_DETAILS=$(jq -r '.suites[]?.specs[]?.tests[]? | select(.results[-1].status == "failed") | .results[-1].error.message' playwright-report.json)

          CLEAN_ERROR_DETAILS=$(echo "$ERROR_DETAILS" | sed 's/\x1b\[[0-9;]*m//g')
          
          echo "Creating issue for failed tests: $TEST_NAMES"
          echo "Error details (cleaned): $CLEAN_ERROR_DETAILS"

          if [ -z "$TEST_NAMES" ] || [ -z "$CLEAN_ERROR_DETAILS" ]; then
            echo "Test names or error details are missing, skipping issue creation."
            exit 0
          fi

          while IFS= read -r TEST_NAME; do
            echo "Creating issue for failed test: $TEST_NAME"

            JSON_PAYLOAD=$(jq -n \
              --arg title "[Playwright Test Failure]: $TEST_NAME" \
              --arg body "A test failed in buerokratt/GH-API-Test-1.\nDetails:\n- Test: $TEST_NAME\n- Error: $CLEAN_ERROR_DETAILS" \
              '{
                title: $title,
                body: $body,
                labels: ["bug"]
              }')
            
            response=$(curl -X POST \
              -H "Authorization: token ${{ secrets.BYK_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/buerokratt/GH-API-Test-1/issues \
              -d "$JSON_PAYLOAD")

            echo "Raw API response: $response"

            ISSUE_ID=$(echo "$response" | jq -r '.id')

            if [ "$ISSUE_ID" == "null" ] || [ -z "$ISSUE_ID" ]; then
              echo "Failed to create the issue. Response was: $response"
              exit 1
            fi
            
            echo "Created issue with ID: $ISSUE_ID"
            echo "::set-output name=issue_id::$ISSUE_ID"
          done <<< "$TEST_NAMES"

      # # Optional: Add the created issue to a project board
      # - name: Add issue to project board
      #   if: steps.search_issue.outputs.issue_found == '0'
      #   run: |
      #     ISSUE_ID="[issue_id]"  # Get this from the created issue response
      #     COLUMN_ID="[column_id]"  # Get this from your project board setup
      #     echo "Adding issue to the project board..."
      #     curl -X POST \
      #       -H "Authorization: token ${{ github.token }}" \  # Use the default GITHUB_TOKEN
      #       -H "Accept: application/vnd.github.v3+json" \
      #       https://api.github.com/projects/columns/$COLUMN_ID/cards \
      #       -d '{
      #         "content_id": '"$ISSUE_ID"',
      #         "content_type": "Issue"
      #       }'
