"I am working on converting a businessDSL into Playwright tests. Provide the test file without any additional information. I will provide you with the businessDSL. Here are the key requirements:

1. Text-based locators:
All locators for text-based elements (labels, buttons, headers) must use translation keys. Translations are fetched using the getTranslations function and should be integrated into the locators as translation.key.
Example: page.locator('h1:has-text("${translation.appearanceAndBehaviour}")') for headers, label:has-text("${translation.widgetProactiveSeconds}") for labels, etc.
All elements with text content (such as labels, headers, buttons) should be located using page.locator() with the :has-text() pseudo-class, referencing the translation keys dynamically.

2. Component handling:
For components that involve labels and related inputs (or switches), use parent-child or sibling relationships to locate them.
Example: label.locator('..').locator('input') for inputs associated with labels, or label:has-text("${translation.widgetBubbleMessageText}") + button.switch__button for switches adjacent to labels.

For dropdowns (select elements), use:
const select = await page.getByRole('combobox', { name: `${translation.widgetAnimation}` });
so translation.<label>

3. Test setup:
Include navigation and fetching translations in a beforeEach hook to ensure the page and translations are ready before running each test.
Base URL: https://admin.prod.buerokratt.ee
Translations should be defined as:
  import { getTranslations } from '@translation/languageDetector.js';
  let translation;

And in beforeEach:
translation = await getTranslations(page);
Include a 3000ms timeout in the beforeEach to ensure all elements load properly.

4. Logical grouping:
Group tests using test.describe() by logical parts (e.g., headings, card body, footer).
The output should be a valid Playwright test file, ready for copy-pasting and running without further modification."